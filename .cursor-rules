{
  "architecture": "MVVM",
  "namingConvention": "camelCase",
  "uiFramework": "SwiftUI",
  "preferStructs": true,
  "useLatestLanguageFeatures": true,
  "avoidForceUnwrap": true,
  "apiIntegration": {
    "style": "async-await",
    "errorHandling": "do-catch"
  },
  "folderStructure": {
    "app": "App",
    "features": "Features/{FeatureName}",
    "models": "Models",
    "services": "Services",
    "shared": {
      "components": "Shared/Components",
      "extensions": "Shared/Extensions"
    },
    "resources": "Resources"
  },
  "projectLayout": {
    "App": [
      "iOSApp_VibeCodingTestApp.swift"
    ],
    "Features": {
      "Login": [
        "LoginView.swift",
        "LoginViewModel.swift"
      ],
      "MainTab": [
        "MainTabView.swift"
      ],
      "Home": [
        "HomeView.swift",
        "HomeViewModel.swift"
      ],
      "Settings": {
        "View": [
          "GoalSettingsView.swift",
          "SettingsView.swift"
        ],
        "ViewModel": [
          "GoalSettingsViewModel.swift",
          "SettingsViewModel.swift"
        ]
      },
      "Camera": {
        "View": [
          "CameraCaptureView.swift",
          "CameraProcessingView.swift",
          "CameraView.swift"
        ],
        "ViewModel": [
          "CameraProcessingViewModel.swift",
          "CameraViewModel.swift"
        ],
        "Service": [
          "CameraService.swift"
        ]
      },
      "Analysis": {
        "Model": [
          "MacroEntry.swift"
        ],
        "View": [
          "AnalysisView.swift",
          "DailyTrendChart.swift",
          "MacroBarChart.swift"
        ],
        "ViewModel": [
          "AnalysisViewModel.swift"
        ]
      }
    },
    "Models": [
      "FoodItem.swift",
      "UserSettings.swift",
      "VisionAPIResponse.swift"
    ],
    "Shared": {
      "Components": [
        "CalorieSummaryCard.swift",
        "CircularProgressBar.swift",
        "FloatingActionButton.swift",
        "FoodCard.swift",
        "FoodEditView.swift",
        "MacroCard.swift",
        "MacrosSummaryView.swift"
      ],
      "Constants": [
        "AppStorageKeys.swift"
      ],
      "Extensions": [
        "Binding+Extension.swift",
        "Date+Extension.swift",
        "DateFormatter+Extension.swift",
        "UIImage+Extension.swift"
      ]
    },
    "Resources": [
      "Assets/"
    ]
  },
  "aiInstructions": [
    "You are an expert AI programming assistant focused on Swift and SwiftUI.",
    "Always use the latest Swift and SwiftUI syntax and best practices.",
    "Provide accurate, factual, thoughtfulswiftformat . answers, and excel at reasoning.",
    "Follow Apple's best practices and apply Clean Code and SOLID principles.",
    "Follow the user's requirements to the letter.",
    "Only work on the exact feature requested and never modify other files without permission.",
    "Before writing code, describe the plan in detailed pseudocode.",
    "Always confirm your understanding before writing code.",
    "Always write clear, readable, and accurate code.",
    "Ensure all code is bug-free, complete, secure, performant, and efficient.",
    "Implement async/await(structured concurrency) APIs with custom error types using `throws`.",
    "Leave no placeholders, TODOs, or missing logic.",
    "Avoid if-else pyramids of doom. Use guard statements and early exits.",
    "Use [weak self] and guard self to avoid retain cycles in closures.",
    "Pass dependencies explicitlyâ€”avoid singletons or globals.",
    "Use NavigationStack and navigationDestination for navigation.",
    "Use List, LazyVStack, LazyHStack or LazyVGrid with identifiable data for large scrollable views.",
    "Optimize ForEach loops by using stable identifiers.",
    "Implement custom view modifiers for shared styling and behavior.",
    "Always use extensions for modifiers or shared utilities.",
    "Use appropriate property wrappers and macros",
    "Use the Observation framework (`@Observable`, `@State`, and `@Binding`) to build reactive views.",
    "Annotate view models with `@Observable`, e.g. `@Observable final class MyViewModel`.",
    "Do not use @State in the SwiftUI View for view model observation. Instead, use `let viweModel: MyViewModel`.",
    "For reference type state shared with a child view, pass the dependency to the constructor of the child view.",
    "For value type state shared with a child view, use SwiftUI bindings if and only if the child needs write access to the state.",
    "For value type state shared with a child view, pass the value if the child view only needs read access to the state.",
    "Use an `@Environment` for state that should be shared throughout the entire app, dependency injection, or large pieces of the app.",
    "Use `@State` only for local state that is managed by the view itself.",
    "Use `@Binding` for two-way data flow between parent and child views.",
    "Implement custom `PreferenceKey`s for child-to-parent communication.",
    "Implement proper error handling and propagation.",
    "If unsure or if no correct answer exists, state that directly.",
    "Generate SwiftUI views with preview providers.",
    "Always break SwiftUI views into smaller reusable views.",
    "Define all view-specific string and layout constants inside a private enum Constants scoped within the SwiftUI view. Place Constants at the bottom of the struct to maintain clean separation and improve readability.",
    "Add SwiftUI animations to user-triggered actions where they enhance UX (e.g., button taps, view transitions, deletions). Use `.animation(_:value:)`, `withAnimation`, or matched transitions where appropriate. Avoid animating background logic or persistent storage writes.",
    "Avoid redundant boilerplate.",
    "Never use print statements. Use proper error handling with do-catch and custom Error types to surface issues.",
    "Write testable and clean code."
  ],
  "references": [
    "https://developer.apple.com/swift/",
    "https://www.swift.org/",
    "https://docs.swift.org/swift-book/documentation/the-swift-programming-language/",
    "https://developer.apple.com/xcode/swiftui/",
    "https://developer.apple.com/design/human-interface-guidelines",
    "https://developer.apple.com/design/tips/",
    "https://developer.apple.com/design/human-interface-guidelines/designing-for-ios/"
  ]
}